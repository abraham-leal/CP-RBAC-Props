rest.port=8083
config.storage.replication.factor=1
config.storage.topic=connect-cluster-configs
group.id=connect-cluster
offset.flush.interval.ms=10000
offset.storage.replication.factor=1
offset.storage.topic=connect-cluster-offsets
status.storage.replication.factor=1
status.storage.topic=connect-cluster-status
plugin.path=/usr/share/java
connector.client.config.override.policy=All

# Kafka Connect Configuration
listeners=http://0.0.0.0:8083
rest.advertised.listener=http
rest.advertised.host.name=ec2-52-39-10-64.us-west-2.compute.amazonaws.com
rest.advertised.host.port=8083

# Kafka Broker Configuration
## Note: It authenticates against the RBAC impersonation port
bootstrap.servers=http://somepas<KAFKA_URL>:9093
security.protocol=SASL_PLAINTEXT
sasl.mechanism=OAUTHBEARER
sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required \
  username="abe-super" \
  password="somepass" \
  metadataServerUrls="<MDS_URL>:8090";
sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler

## Schema registry settings
key.converter=io.confluent.connect.avro.AvroConverter
value.converter=io.confluent.connect.avro.AvroConverter
value.converter.schema.registry.url=http://<SR_URL>:8081,http://<SR_URL>:8081
key.converter.schema.registry.url=http://<SR_URL>:8081,http://<SR_URL>:8081


# Producer Monitoring Configuration
# Note it utilies non-impersonation, 9094/SASL_PLAIN/PLAIN port
producer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor
producer.confluent.monitoring.interceptor.bootstrap.servers=somepas<KAFKA_URL>:9094
producer.confluent.monitoring.interceptor.security.protocol=SASL_PLAINTEXT
producer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
producer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="abe-super" \
  password="somepass";



# Consumer Monitoring Configuration
# Note it utilies non-impersonation, 9094/SASL_PLAIN/PLAIN port
consumer.interceptor.classes=io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
consumer.confluent.monitoring.interceptor.bootstrap.servers=somepas<KAFKA_URL>:9094
consumer.confluent.monitoring.interceptor.security.protocol=SASL_PLAINTEXT
consumer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
consumer.confluent.monitoring.interceptor.sasl.jaas.config=org.apache.kafka.common.security.plain.PlainLoginModule required \
  username="abe-super" \
  password="somepass";

### RBAC Configs for internal producers and consumers ###
### NOTE: This is predisposing connectors to usilize the RBAC Oauth port
### Connectors can easily override this to provide auths to other ports 
### As long as they have the right credentials
### However, this sets a default to utilize the RBAC port, but leaves the JAAS Config to be provided by the connector
producer.bootstrap.servers=<KAFKA_URL>:9093
producer.security.protocol=SASL_PLAINTEXT
producer.sasl.mechanism=OAUTHBEARER
producer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler

consumer.bootstrap.servers=somepas<KAFKA_URL>:9093
consumer.security.protocol=SASL_PLAINTEXT
consumer.sasl.mechanism=OAUTHBEARER
consumer.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler

admin.bootstrap.servers=somepas<KAFKA_URL>:9093
admin.security.protocol=SASL_PLAINTEXT
admin.sasl.mechanism=OAUTHBEARER
admin.sasl.login.callback.handler.class=io.confluent.kafka.clients.plugins.auth.token.TokenUserLoginCallbackHandler

# Adds the RBAC REST extension to the Connect worker
rest.extension.classes=io.confluent.connect.security.ConnectSecurityExtension

# Connect to the MDS
confluent.metadata.bootstrap.server.urls=http://<MDS_URL>:8090
confluent.metadata.basic.auth.user.info=abe-super:somepass
confluent.metadata.http.auth.credentials.provider=BASIC

rest.servlet.initializor.classes=io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
# The path to a directory containing public keys that should be used to verify json web tokens
# during authentication
public.key.path=/tmp/conf/public.pem
